<html>
	<head>
	  <!-- Initialize a global WBK function -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
	  <!-- Initialize a global wdk object using the WBK object -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
	  <!-- d3 library -->
	  <script src="https://d3js.org/d3.v5.min.js"></script>
	  <!-- for d3 -->
	  <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
	</head>

<body>
<div id="foo">

<script>

//initializing variable 
	var dataCORT = [];
	var dataKB = [];
	var nodes = []; // creating array for node data (first will be protein/metabolite, second is the group)
	var links = []; // data needed for links array 
	var dataOG = [];
	var distinctData = [];
	var dataStrings = [];
	var distinctDataStrings = [];
	var nodesString = []; 
	var data = new Object();  // what d3 wants 

//pulling queries
	url = "http://sparql.wikipathways.org/"
	queryCORT = `
	PREFIX wdt: <http://www.wikidata.org/prop/direct/>                   
	PREFIX wd:  <http://www.wikidata.org/entity/>                  
	SELECT  ?inchikey ?hgnc                                              
	WHERE {                                                              
	  SERVICE <https://query.wikidata.org/sparql>   
	  {
		VALUES ?wikidata { wd:Q190875 }                                  
		?wikidata wdt:P235 ?inchikey .                                                                                             
	 }
	  ?metabolite a wp:Metabolite ;                                                          
				  rdfs:label ?metaboliteLabel ;
				  wp:bdbWikidata ?wikidata ;
				  dcterms:isPartOf ?pathway .                       
	  ?pathway a wp:Pathway ;                                      
			   foaf:page ?homepage .                               
	  ?protein a wp:Protein ;
				  rdfs:label ?proteinLabel ;
				  wp:bdbHgncSymbol ?hgnc;                          
				  dcterms:isPartOf ?pathway .
	 ?pathway wp:organismName "Homo sapiens"^^xsd:string .
	}
	`

	var queryUrlc = encodeURI( url+"?query="+queryCORT );
	fetch( queryUrlc, {headers: {"Accept": 'application/json'}} )
	  .then( response => response.json() )
	  .then( wdk.simplify.sparqlResults )
	  .then( function (response) {  // assign other data...
	  //put the second fetch with fx inside
	  dataCORT = response;
	  
	var queryUrlkb = encodeURI( url+"?query="+queryKB );
    fetch( queryUrlkb, {headers: {"Accept": 'application/json'}} )
      .then( response => response.json() )
	  .then( wdk.simplify.sparqlResults )
	  .then( function (response) {
	  dataKB = response;
	  
	  dataOG = dataCORT.concat(dataKB);
	  getAll(dataOG);
	  visualize(data);
			}
		  )	
		}
	  ) // inbedded inorder to run both and not have asyncrinousity
	  
	queryKB = `
	PREFIX wdt: <http://www.wikidata.org/prop/direct/>                    
	PREFIX wd:  <http://www.wikidata.org/entity/>                        

	SELECT ?inchikey ?hgnc                                                 
	WHERE {                                                              
	  SERVICE <https://query.wikidata.org/sparql> 
	  {                      
																		  
		?wikidata wdt:P31 wd:Q746183 ;                                   
				  wdt:P235 ?inchikey .                                                          
	  }
	  
	  ?metabolite a wp:Metabolite ;                               
				  rdfs:label ?metaboliteLabel ;
				  wp:bdbWikidata ?wikidata ;                        
				  dcterms:isPartOf ?pathway .                       
	  ?pathway a wp:Pathway ;                                          
			   foaf:page ?homepage .                            
	  ?protein a wp:Protein ;
				  rdfs:label ?proteinLabel ;
				  wp:bdbHgncSymbol ?hgnc ;                          
				  dcterms:isPartOf ?pathway .
	  ?pathway wp:organismName "Homo sapiens"^^xsd:string .
	
	} 
	  `  //end of virtuoso queries being used
	  
	//this function encapsulated all the arrangement of the data in order for D3 to use it propertly	 
    function getAll(dataOG){
  
		function label(identifier){ // function made so we can change the query output to a readable (for humans and d3) output 
			var idLabel;
			
			if (identifier === "WDJHALXBUFZDSR-UHFFFAOYSA-N") {
				idLabel = "ACA";				
			}else if (identifier === "WHBMMWSBFZVSSR-GSVOUGTGSA-N") {
				idLabel = "BHB";	
			} else if (identifier === "JYGXADMDTFJGBT-VWUMJDOOSA-N" ){
				idLabel = "Cortisol";
			} else if (identifier === undefined || identifier === null) {
				idLabel = "Undefined";
			} else {
				idLabel = identifier.slice(35);
			}
			
			return idLabel;
	    } 
	
		dataOG.forEach(object => dataStrings.push(object.inchikey + object.hgnc)); //make an array of strings of the objects in data
		
		const unique = (value, index, self) => { //how does this work?
			return self.indexOf(value) === index
		}
		
		distinctDataStrings = dataStrings.filter(unique); //find unique values in dataStrings
		
		//creating object from each element in the arrray of strings		
		for(var i = 0; i < distinctDataStrings.length; i++) {
			var dataPoint = new Object();
			dataPoint.inchikey = distinctDataStrings[i].slice(0, 27);
			dataPoint.hgnc = distinctDataStrings[i].slice(27);
			distinctData.push(dataPoint);
		}
		
		//make arrays of Strings for both nodes and links in order to avoid adding duplicates to the real nodes and links arrays
		//add elements to nodes and links arrays
		for(var i = 0; i < distinctData.length; i++) {
		
			var link = new Object();
			link.source = label(distinctData[i].inchikey);
			link.target = label(distinctData[i].hgnc);
			link.value = 1; //setting the thickness of the line to one, because we can not weight it propertly representative
			links.push(link);
		
			if(!nodesString.includes(label(distinctData[i].inchikey))) {
				nodesString.push(label(distinctData[i].inchikey));
				var node = new Object();
				node.id = label(distinctData[i].inchikey);
				node.group = groupify(node);
				nodes.push(node);
			}
			
			if(!nodesString.includes(label(distinctData[i].hgnc))) {
				nodesString.push(label(distinctData[i].hgnc));
				var node = new Object();
				node.id = label(distinctData[i].hgnc);
				node.group = groupify(node)
				nodes.push(node);
			}
		}
				
		//add property group number for BHB and Cortisol. Can it be abstracted?		
		function groupify(node){
			if (node.id === "Cortisol") {
				return 1;
			} else if (node.id === "ACA") {
				return 2;   // this works
			} else if (node.id === "BHB") {
				return 3;   // this works
			} else {
				for (var i = 0; i < links.length; i++) {
					if(node.id === links[i].target){
						if (links[i].source === "Cortisol"){
							return 4;
						} else if (links[i].source === "ACA"){
							return 5;
						} else if (links[i].source === "BHB"){
							return 6;
						} 
					}
				}
			} // below will try to fix to get RETURn 7 specifically known MAOA which is in BHB and Cortisol
			/*{
				for (var j = 0; j < links.length; j++) {   //this is being annoying right now
					if (links[j].target === node.id) {
						if (links[j].source === "Cortisol") {
							for(var k = j+1;k < links.length; k++){
								console.log("for loop works");
								if (links[k].target === node.id) {
									console.log("it finds the node");
									if(links[k].source === "BHB" || links[k].source === "ACA"){
										return 7;
									}
								}else{return 4;}
							}
						}else if(links[j].source === "ACA"){return 5;}
						else{return 6;}
					}
				}
			}*/
		}
		
	data.nodes = nodes;
	data.links = links;
	} //getall fx ends

//begigning of D3

//we have to sett, if doesnt work change 600,800
height = 600
width = 1900

colors = [ "red", "green", "blue", "purple", "pink", "yellow", "orange"] // the colors which will go with the different groups 

//function for drag
drag = simulation => {
  
  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }
  
  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }
  
  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
  
  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}

function visualize(vizdata) {   //create function - d3 starts - use d3 functions to split data
console.log("INSIDE VISUALIZE")
console.log(vizdata)
//console.log(JSON.stringify(vizdata, undefined, 2))

const vizlinks = vizdata.links.map(d => Object.create(d));
const viznodes = vizdata.nodes.map(d => Object.create(d));

const simulation = d3.forceSimulation(nodes)     // reshape thing
   .force("link", d3.forceLink(links).id(d => d.id))
   .force("charge", d3.forceManyBody())
   .force("center", d3.forceCenter(width / 2, height / 2));

  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height]);

  const link = svg.append("g")
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6)
    .selectAll("line")
    .data(vizlinks)
    .join("line")
      .attr("stroke-width", d => Math.sqrt(d.value));

  const node = svg.append("g")
      .attr("stroke", "#fff")
      .attr("stroke-width", 1.5)
		.selectAll("circle")
		.data(viznodes)
		.join("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return colors[d.group-1]} ) //right part is calling the colors, -1 bc indexing, fun(d) returs color on input d - d is node were looking at 
     .call(drag(simulation));

  node.append("title")
      .text(d => d.id);

  simulation.on("tick", () => {
    link
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

    node
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);
  });
  document.getElementById("foo").appendChild(svg.node())
 } 
 // close function 
  
  
 // try drag
  console.log("DATA")
  console.log(data)
  console.log("VISUALIZING")
  //visualize(data);
   // - instead of .inner text 0 returns SVG node
  
  //interacting genes - sp - uri - document is html page - select something by id - 

 //d3 = require("d3@5")
 
   </script>
  </div>
  

  </body>
</html>
