<html>
	<head> <!-- Libraries providing correct vocabulary for the usage of wikidata and d3 -->
	  <!-- Initialize a global WBK function -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
	  <!-- Initialize a global wdk object using the WBK object -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
	  <!-- d3 library -->
	  <script src="https://d3js.org/d3.v5.min.js"></script>
	  <!-- for d3 -->
	  <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
	</head>

<body>
<div id="foo">

<script>

//initializing variables 
	var dataCORT = []; // array with first query results with Cortisol and the enzymes present in its pathways on wikipathways
	var dataKB = []; //Similar array with second query results this time with enzymes related to Ketone Bodies (BHB and ACA)
	var nodes = []; // array which will take in all the nodes to be used for d3
	var links = []; // array which will take in information about the nodes that should be linked to each other
	var dataOG = []; // Original and unaltered array of combined query results
	var distinctData = [];
	var dataStrings = [];
	var distinctDataStrings = [];
	var nodesString = []; 
	var data = new Object();  // Object for d3 input


//Initializing the wikipathways queries that will be pulled
	url = "http://sparql.wikipathways.org/"
	queryCORT = `
	PREFIX wdt: <http://www.wikidata.org/prop/direct/>                   
	PREFIX wd:  <http://www.wikidata.org/entity/>                  
	SELECT  ?inchikey ?hgnc                                              
	WHERE {                                                              
	  SERVICE <https://query.wikidata.org/sparql>   
	  {
		VALUES ?wikidata { wd:Q190875 }                                  
		?wikidata wdt:P235 ?inchikey .                                                                                             
	 }
	  ?metabolite a wp:Metabolite ;                                                          
				  rdfs:label ?metaboliteLabel ;
				  wp:bdbWikidata ?wikidata ;
				  dcterms:isPartOf ?pathway .                       
	  ?pathway a wp:Pathway ;                                      
			   foaf:page ?homepage .                               
	  ?protein a wp:Protein ;
				  rdfs:label ?proteinLabel ;
				  wp:bdbHgncSymbol ?hgnc;                          
				  dcterms:isPartOf ?pathway .
	 ?pathway wp:organismName "Homo sapiens"^^xsd:string .
	}
	`
	queryKB = `
	PREFIX wdt: <http://www.wikidata.org/prop/direct/>                    
	PREFIX wd:  <http://www.wikidata.org/entity/>                        

	SELECT ?inchikey ?hgnc                                                 
	WHERE {                                                              
	  SERVICE <https://query.wikidata.org/sparql> 
	  {                      

		?wikidata wdt:P31 wd:Q746183 ;                                   
				  wdt:P235 ?inchikey .                                                          
	  }

	  ?metabolite a wp:Metabolite ;                               
				  rdfs:label ?metaboliteLabel ;
				  wp:bdbWikidata ?wikidata ;                        
				  dcterms:isPartOf ?pathway .                       
	  ?pathway a wp:Pathway ;                                          
			   foaf:page ?homepage .                            
	  ?protein a wp:Protein ;
				  rdfs:label ?proteinLabel ;
				  wp:bdbHgncSymbol ?hgnc ;                          
				  dcterms:isPartOf ?pathway .
	  ?pathway wp:organismName "Homo sapiens"^^xsd:string .

	} 
	  `  
	  
	  
	var queryUrlc = encodeURI( url+"?query="+queryCORT );
	fetch( queryUrlc, {headers: {"Accept": 'application/json'}} )
	  .then( response => response.json() )
	  .then( wdk.simplify.sparqlResults )
	  .then( function (response) {  
//put the second fetch with fx inside the first so queries are run one after the other and both results put into their destined variables
		dataCORT = response; //assigning first query results

		var queryUrlkb = encodeURI( url+"?query="+queryKB );
		fetch( queryUrlkb, {headers: {"Accept": 'application/json'}} )
		.then( response => response.json() )
		.then( wdk.simplify.sparqlResults )
		.then( function (response) {
// inbedded inside fetch call in order to run data processing after query results have been returned
			dataKB = response; //assigning second query results

			dataOG = dataCORT.concat(dataKB);
			getAll(dataOG); //data processing to have a correct input format for d3
			visualize(data); //d3 visualization
			}
		  )	
		}
	  ) 



	//this function encapsulated all the arrangement of the data in order for D3 to use it propertly	 
    function getAll(dataOG){

		function label(identifier){ // function made so we can change the query output to a readable (for humans and d3) output 
			var idLabel;

			if (identifier === "WDJHALXBUFZDSR-UHFFFAOYSA-N") {
				idLabel = "ACA";				
			}else if (identifier === "WHBMMWSBFZVSSR-GSVOUGTGSA-N") {
				idLabel = "BHB";	
			} else if (identifier === "JYGXADMDTFJGBT-VWUMJDOOSA-N" ){
				idLabel = "Cortisol";
			} else if (identifier === undefined || identifier === null) {
				idLabel = "Undefined";
			} else {
				idLabel = identifier.slice(35);
			}

			return idLabel;
	    } 

		dataOG.forEach(object => dataStrings.push(object.inchikey + object.hgnc)); //make an array of strings of the objects in data

		const unique = (value, index, self) => { //how does this work? RESEARCH RESEARCH RESEARCH -> creates a variable unique that will be used to store each data entry to check for repeting entries ???? (from intuition)
			return self.indexOf(value) === index
		}

		distinctDataStrings = dataStrings.filter(unique); //find unique values in dataStrings

		//creating object from each element in the arrray of strings		
		for(var i = 0; i < distinctDataStrings.length; i++) {
			var dataPoint = new Object();
			dataPoint.inchikey = distinctDataStrings[i].slice(0, 27);
			dataPoint.hgnc = distinctDataStrings[i].slice(27);
			distinctData.push(dataPoint);
		}

		//make arrays of Strings for both nodes and links in order to avoid adding duplicates to the real nodes and links arrays
		//add elements to nodes and links arrays
		for(var i = 0; i < distinctData.length; i++) {

			var link = new Object();
			link.source = label(distinctData[i].inchikey); // is the metabolite's identifier
			link.target = label(distinctData[i].hgnc); // is the protein which has a relationship with the source metabolite
			link.value = 1; // setting the thickness of the line to one, because the relative importance of each interaction is not given by the queries
			links.push(link);

			if(!nodesString.includes(label(distinctData[i].inchikey))) {
				nodesString.push(label(distinctData[i].inchikey));
				var node = new Object();
				node.id = label(distinctData[i].inchikey); // the name of the metabolite is set as the node's id
				node.group = groupify(node); //its group is given depending on its nature
				nodes.push(node);
			}

			if(!nodesString.includes(label(distinctData[i].hgnc))) {
				nodesString.push(label(distinctData[i].hgnc));
				var node = new Object();
				node.id = label(distinctData[i].hgnc); // lines 169-170 repeat process at lines 161-162 but with the HGNC of the proteins
				node.group = groupify(node)
				nodes.push(node);
			}
		}

		// assign nodes to a group depending on its nature or to which metabolite(s) it is linked (ISSUE WITH GROUP 7)
		function groupify(node){
		// First metabolites are each given a distinct group
			if (node.id === "Cortisol") {
				return 1;
			} else if (node.id === "ACA") {
				return 2;   
			} else if (node.id === "BHB") {
				return 3;   
			} else {
		// protein linked with cortisol, or ACA, or BHB (4 or 5 or 6 respectively); protein linked to cortisol and a ketone body (7)	
				for (var i = 0; i < links.length; i++) {
					if(node.id === links[i].target){
						if (links[i].source === "Cortisol"){
							return 4;
						} else if (links[i].source === "ACA"){
							return 5;
						} else if (links[i].source === "BHB"){
							return 6;
						} 
					}
				}
			} // below will try to fix to get RETURn 7 specifically known MAOA which is in BHB and Cortisol
			/*{
				for (var j = 0; j < links.length; j++) {   //this is being annoying right now
					if (links[j].target === node.id) {
						if (links[j].source === "Cortisol") {
							for(var k = j+1;k < links.length; k++){
								console.log("for loop works");
								if (links[k].target === node.id) {
									console.log("it finds the node");
									if(links[k].source === "BHB" || links[k].source === "ACA"){
										return 7;
									}
								}else{return 4;}
							}
						}else if(links[j].source === "ACA"){return 5;}
						else{return 6;}
					}
				}
			}*/
		}
	
// CONCLUSION of getAll => the object input is finalised for d3 with its two methods (arrays)	
	data.nodes = nodes;
	data.links = links;
	} //getAll f(x) ends

//begigning of D3

// to be set relative to display size, change accordingly (h=600, w=800 orignal values)
height = 2247.200
width = 964

colors = [ "red", "green", "blue", "purple", "pink", "yellow", "orange"] // the colors which will go with the different groups

//function for drag
drag = simulation => {

  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

  return d3.drag()
      .on("start", dragstarted)
      .on("drag", dragged)
      .on("end", dragended);
}

function visualize(vizdata) {   //create function - d3 starts - use d3 functions to split data

//  first create the different elements of the diagram (each element is an object d) from data.links and data.nodes
const vizlinks = vizdata.links.map(d => Object.create(d));
const viznodes = vizdata.nodes.map(d => Object.create(d));

const simulation = d3.forceSimulation(nodes)     // expansion of the diagram
   .force("link", d3.forceLink(links).id(d => d.id))
   .force("charge", d3.forceManyBody())
   .force("center", d3.forceCenter(width / 2, height / 2));

  const svg = d3.create("svg") // create display ??
      .attr("viewBox", [0, 0, width, height]);

  const link = svg.append("g") // shaping the links between nodes
      .attr("stroke", "#999")
      .attr("stroke-opacity", 0.6)
    .selectAll("line")
    .data(vizlinks)
    .join("line")
      .attr("stroke-width", d => Math.sqrt(d.value));

  const node = svg.append("g") // shaping nodes
      .attr("stroke", "#fff")
      .attr("stroke-width", 1.5)
		.selectAll("circle")
		.data(viznodes)
		.join("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return colors[d.group-1]} ) // assigning colors; -1 bc color array indexing starts at 0 while groups start at 1, fun(d) returs color on input d
     .call(drag(simulation));

  node.append("title") // assign each node's id as a node title in the diagram
      .text(d => d.id);

  simulation.on("tick", () => {
    link // actually linking nodes in the diagram
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);

    node //assigning node coordinates
        .attr("cx", d => d.x)
        .attr("cy", d => d.y);
  });
  
  d3.select("div#chartId")
   .append("div")
   // Container class to make it responsive.
   .classed("svg-container", true) 
   .append("svg")
   // Responsive SVG needs these 2 attributes and no width and height attr.
   .attr("preserveAspectRatio", "xMinYMin meet")
   .attr("viewBox", "0 0 600 400")
   // Class to make it responsive.
   .classed("svg-content-responsive", true)
   // Fill with a rectangle for visualization.
   .append("rect")
   .classed("rect", true)
   .attr("width", 600)
   .attr("height", 400);
   

  
  document.getElementById("foo").appendChild(svg.node()) //print the visualiztion inside html page division id="foo"
 } 
 // Visualize f(x) end


 // try drag

   // - instead of .inner text 0 returns SVG node

  //interacting genes - sp - uri - document is html page - select something by id - 

 //d3 = require("d3@5")

   </script>
  </div>


  </body>
</html>
