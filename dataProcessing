<html>
	<head>
	  <!-- Initialize a global WBK function -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikibase-sdk.min.js"></script>
	  <!-- Initialize a global wdk object using the WBK object -->
	  <script src="https://cdn.rawgit.com/maxlath/wikidata-sdk/dist/dist/wikidata-sdk.min.js"></script>
	</head>

<body>
<div id="foo" />

<script>
var dataCORT = [];
var dataKB = [];
var nodes = []; // creating array for node data (first will be protein/metabolite, second is the group)
var links = []; // data needed for links array 
var data = [];
var array = [];


url = "http://sparql.wikipathways.org/"

var queryCORT = `                                                     
PREFIX wdt: <http://www.wikidata.org/prop/direct/>                   
PREFIX wd:  <http://www.wikidata.org/entity/>                  
SELECT  ?inchikey ?hgnc                                              
WHERE {                                                              
  SERVICE <https://query.wikidata.org/sparql>   
  {
    VALUES ?wikidata { wd:Q190875 }                                  
    ?wikidata wdt:P235 ?inchikey .                                                                                             
 }
  ?metabolite a wp:Metabolite ;                                
              rdfs:label ?metaboliteLabel ;
              wp:bdbWikidata ?wikidata ;
              dcterms:isPartOf ?pathway .                       
  ?pathway a wp:Pathway ;                                      
           foaf:page ?homepage .                               
  ?protein a wp:Protein ;
              rdfs:label ?proteinLabel ;
              wp:bdbHgncSymbol ?hgnc;                          
              dcterms:isPartOf ?pathway .
 ?pathway wp:organismName "Homo sapiens"^^xsd:string .
}
`

var queryKB = `                                                           
PREFIX wdt: <http://www.wikidata.org/prop/direct/>                    
PREFIX wd:  <http://www.wikidata.org/entity/>                        

SELECT ?inchikey ?hgnc                                                 
WHERE {                                                              
  SERVICE <https://query.wikidata.org/sparql> {                      
                                                                      
    ?wikidata wdt:P31 wd:Q746183 ;                                   
              wdt:P235 ?inchikey .                                                          
  }
  
  ?metabolite a wp:Metabolite ;                               
              rdfs:label ?metaboliteLabel ;
              wp:bdbWikidata ?wikidata ;                        
              dcterms:isPartOf ?pathway .                       
  ?pathway a wp:Pathway ;                                          
           foaf:page ?homepage .                            
  ?protein a wp:Protein ;
              rdfs:label ?proteinLabel ;
              wp:bdbHgncSymbol ?hgnc ;                          
              dcterms:isPartOf ?pathway .
  ?pathway wp:organismName "Homo sapiens"^^xsd:string .

} 
  ` 
  
var queryUrlc = encodeURI( url+"?query="+queryCORT );                      
fetch( queryUrlc, {headers: {"Accept": 'application/json'}} )
  .then( responseC => responseC.json() )
  .then( wdk.simplify.sparqlResults )
  .then( function (responseC) {  // assign other data...
  //put the second fetch with function inside
    dataCORT = responseC;
   var queryUrlkb = encodeURI( url+"?query="+queryKB );
	fetch( queryUrlkb, {headers: {"Accept": 'application/json'}} )
	.then( responseKB => responseKB.json() )
	.then( wdk.simplify.sparqlResults )
	.then( function (responseKB) {
	 dataKB = responseKB;
	 data = dataCORT.concat(dataKB);
	getAll(data);	
      console.log(
        JSON.stringify(responseKB, undefined, 2)
      )
	//  document.getElementById("ketones").innerHTML =  JSON.stringify(response, undefined, 2) 
		
    }
  )
      console.log(
        JSON.stringify(responseC, undefined, 2)
      )
	 // document.getElementById("cortisol").innerHTML =  JSON.stringify(response, undefined, 2) 
	   
    }
  )
   


 function getAll(data){
 // initialazing variables
  
  function label(identifier){ // function made so we can change the query output to a readable (for humans and d3) output 
   var idLabel;
  if(identifier === "WDJHALXBUFZDSR-UHFFFAOYSA-N") {
			idLabel = "BHB";
	}else if(identifier === "JYGXADMDTFJGBT-VWUMJDOOSA-N" ){
			idLabel = "Cortisol";
	}else{
		idLabel = identifier.substring(35, identifier.length);
	}
	return idLabel;
  }
  
  
  function isRepeated(object,array){
		for(i=0; i < array.length; i++){
			if(String(array[i]) === String(object)){
				return true;
			}
		}
		return false;
	}
  
/*  
	for(i = 0; i < data.length; i++) {
		if(!array.includes(data[i])) {
			array.push(data[i]);
		}
	}
	for(i = 0;i < array.length; i++){
		links.push([label(array[i].inchikey) , label(array[i].hgnc)]);
	}
 */
	var object2compare2;
	//making of new arrays: NODES and LINKS - with new labels 
	for(i = 0; i < data.length; i++) {
		var link = new Object();
		link.source = label(data[i].inchikey);
		link.target = label(data[i].hgnc);
		if (!isRepeated(link,links)){
			links.push(link);    
		}
		var node1 = new Object();
			node1.id = label(data[i].inchikey);
			node1.group = groupify(node1);
			var node2 = new Object();
			node2.id = label(data[i].hgnc);
			node2.group = groupify(node2);
		if(!isRepeated(node1,nodes)){
			nodes.push(node1);
		}if(!isRepeated(node2,nodes)){
			nodes.push(node2);
		}
	}
	
 
 function groupify(node){
//making groups for Nodes array
		if (node.id === "Cortisol") {
			return 1;
		} else if (node.id === "BHB") {
			return 2;
		} else {
			for(j=0; j<links.length; j++){
				if(links[j].target === node.id){
					if(links[j].source === "Cortisol"){
						return 3;
					} else if (links[j].source === "BHB"){
						if(node.group === 3){
						return 5;
						}else{
						return 4; 	
						}
					}
				}
			}
		}
	

	}	
}

	//document.getElementById("cortisol").innerHTML = links;
	// there is something wrong with out data

  </script>
  
  
  <div id="cortisol">
  
  
  </div>
  <div id="ketones">
  
  
  </div>
  </body>
</html>
